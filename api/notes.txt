FLOW:
Controller
    PaymentController.pay() { 
        CustomerPays.payCart()
    }
UseCase
    CustomerPays.payCart() { 
        PaymentCardService.validateCard()
        PaymentCardService.makePayment()
    }
Service
    PaymentCardService.validateCard() {}
    PaymentCardService.makePayment() {}

ARCH:
/Domain
    /Customer
        /DTOS
        CustomerEntity.ts
/Infrastructure-Services
    /Pipefy
    /Queue
    /CacheRepository
    /DatabaseRepository
        /Customer
            CustomerRepository.ts
/UseCases
    /CustomerPays
    /LeadRegister
/Services

NOTES:
*Nest já tem a camada Repository. Se precisar de algo específico, fazer um Repository
*Como modularizar (ou se devo) a aplicação
*Precisa de Camada Service. E o controller chama UseCases ou a Service?
*UseCases → Linguagem de negocio DDD
*Infrastructure-Services → apps externos fora da empresa 
*Usar LSP para pipefy integration